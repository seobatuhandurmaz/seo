{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP46xR3mXKIAatX+Dl44rQN"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vw95mWoBA0XC"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "from difflib import SequenceMatcher\n",
        "import openpyxl\n",
        "\n",
        "# Take user input for sitemap URL\n",
        "sitemap_url = input(\"Enter sitemap URL: \")\n",
        "\n",
        "try:\n",
        "    # Send a GET request to the sitemap URL and retrieve the response\n",
        "    response = requests.get(sitemap_url)\n",
        "    response.raise_for_status()\n",
        "\n",
        "    # Parse the XML content of the sitemap using BeautifulSoup\n",
        "    soup = BeautifulSoup(response.content, \"xml\")\n",
        "\n",
        "    # Take user input for base URL\n",
        "    base_url = input(\"Enter base URL: \")\n",
        "\n",
        "    # Find all the URL elements in the sitemap\n",
        "    url_elements = soup.find_all(\"url\")\n",
        "\n",
        "    # Define a function to compute the similarity rate between two URLs\n",
        "    def compute_similarity(url1, url2):\n",
        "        # Extract the paths of the URLs after the base URL\n",
        "        path1 = url1[len(base_url):]\n",
        "        path2 = url2[len(base_url):]\n",
        "\n",
        "        # Compute the similarity rate between the two paths\n",
        "        return SequenceMatcher(None, path1, path2).ratio()\n",
        "\n",
        "    # Take user input for similarity threshold\n",
        "    similarity_threshold = float(input(\"Enter similarity threshold: \"))\n",
        "\n",
        "    # Create a new Excel workbook and add a worksheet for the results\n",
        "    workbook = openpyxl.Workbook()\n",
        "    worksheet = workbook.active\n",
        "    worksheet.title = \"Similar URLs\"\n",
        "\n",
        "    # Add headers to the worksheet\n",
        "    worksheet[\"A1\"] = \"URL 1\"\n",
        "    worksheet[\"B1\"] = \"URL 2\"\n",
        "    worksheet[\"C1\"] = \"Similarity rate\"\n",
        "\n",
        "    # Loop through each pair of URLs and compute the similarity rate\n",
        "    row_index = 2\n",
        "    found_similar_urls = False\n",
        "    for i in range(len(url_elements)):\n",
        "        url1 = url_elements[i].find(\"loc\").text\n",
        "        for j in range(i+1, len(url_elements)):\n",
        "            url2 = url_elements[j].find(\"loc\").text\n",
        "            similarity_rate = compute_similarity(url1, url2)\n",
        "            if similarity_rate >= similarity_threshold:\n",
        "                worksheet.cell(row=row_index, column=1, value=url1)\n",
        "                worksheet.cell(row=row_index, column=2, value=url2)\n",
        "                worksheet.cell(row=row_index, column=3, value=similarity_rate)\n",
        "                row_index += 1\n",
        "                found_similar_urls = True\n",
        "\n",
        "    if not found_similar_urls:\n",
        "        print(\"No pairs of URLs found with similarity rate above the threshold.\")\n",
        "    else:\n",
        "        # Ask the user whether they want to print the results or export to Excel\n",
        "        export_option = input(\"Do you want to print the results or export them to an Excel file? Enter 'print' or 'excel': \")\n",
        "        if export_option == \"print\":\n",
        "            # Print the results directly\n",
        "            for row in worksheet.iter_rows(values_only=True):\n",
        "                print(\"\\t\".join(str(cell) for cell in row))\n",
        "        elif export_option == \"excel\":\n",
        "            # Save the results to an Excel file\n",
        "            excel_filename = \"similar_urls.xlsx\"\n",
        "            workbook.save(excel_filename)\n",
        "            print(f\"Results saved to {excel_filename}.\")\n",
        "        else:\n",
        "            print(\"Invalid option. Please enter 'print' or 'excel'.\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error retrieving sitemap: {e}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "\n",
        "*  First, enter your sitemap.\n",
        "*  Then enter the base url structure to exclude from similarity testing.\n",
        "*  Finally, determine the similarity threshold. It can be a maximum of 1.\n",
        "*  Choose your export option; \"print\" or \"excel\".\n",
        "*  When the code finishes working, it will output excel into your colab files.\n",
        "\n",
        "Follow me more; https://www.linkedin.com/in/batuhan-durmaz/\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "DoCJP67bA2YF"
      }
    }
  ]
}
